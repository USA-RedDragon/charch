name: Release Charch

on:
  push:
    branches:
      - master
  schedule:
  - cron: "0 1,6,12,18 * * *"

jobs:
  release:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y cpio zstd xorriso syslinux syslinux-common isolinux

      - name: Build
        run: scripts/build.sh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: "Run #${{ github.run_number }}: ${{ github.sha }}"
          draft: false
          prerelease: false

      - name: Upload ISO
        id: upload-iso
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./charchlive.iso
          asset_name: charchlive.iso
          asset_content_type: application/octet-stream

      - name: Upload ISO Checksum
        id: upload-iso-csum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./charchlive.iso.sha512sum
          asset_name: charchlive.iso.sha512sum
          asset_content_type: text/plain

      - name: Upload Kernel
        id: upload-kernel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/image/live/vmlinuz
          asset_name: vmlinuz
          asset_content_type: text/octet-stream
          
      - name: Upload Kernel Checksum
        id: upload-kernel-csum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/image/live/vmlinuz.sha512sum
          asset_name: vmlinuz.sha512sum
          asset_content_type: text/plain

      - name: Upload Rootfs/Ramdisk
        id: upload-ramdisk
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/image/live/initrd
          asset_name: initrd
          asset_content_type: text/octet-stream
          
      - name: Upload Rootfs/Ramdisk Checksum
        id: upload-ramdisk-csum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/image/live/initrd.sha512sum
          asset_name: initrd.sha512sum
          asset_content_type: text/plain

      - name: Place sensitive configs in place
        id: add-creds
        run: |
          echo "${ADGUARD_EXPORTER}" | base64 -d > configs/etc/default/adguard-exporter
          echo "${REDWALL}" | base64 -d > configs/etc/default/redwall
          echo "${ADGUARD_HOME}" | base64 -d > configs/var/lib/adguardhome/AdGuardHome.yaml
        env:
          ADGUARD_EXPORTER: ${{ secrets.ADGUARD_EXPORTER }}
          REDWALL: ${{ secrets.REDWALL }}
          ADGUARD_HOME: ${{ secrets.ADGUARD_HOME }}

      - name: Build for deploy
        run: scripts/build.sh --use-cache

      - name: Copy artifact to PXE server and deploy
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan 192.168.1.25 >> ~/.ssh/known_hosts
          echo "${ISO_COPY_PRIVATE_KEY}" > ~/.ssh/id_iso_copy
          chmod 600 ~/.ssh/id_iso_copy
          ssh-keygen -y -f ~/.ssh/id_iso_copy > ~/.ssh/id_iso_copy.pub
          cat >> ~/.ssh/config <<END
          Host pxe
            HostName ${SSH_HOST}
            User ${SSH_USER}
            IdentityFile ~/.ssh/id_iso_copy
          END
          scp -v charchlive.iso pxe:/var/lib/vz/template/iso/charchlive-firewall.iso
          ssh -v pxe qm reboot 107
        env:
          SSH_USER: ${{ secrets.ISO_COPY_USER }}
          ISO_COPY_PRIVATE_KEY: ${{ secrets.ISO_COPY_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.ISO_COPY_SSH_HOST }}
